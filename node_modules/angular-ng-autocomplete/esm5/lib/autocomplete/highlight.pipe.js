/**
 * @fileoverview added by tsickle
 * Generated from: lib/autocomplete/highlight.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign } from "tslib";
import { Pipe } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var HighlightPipe = /** @class */ (function () {
    function HighlightPipe() {
    }
    /**
     * @param {?} text
     * @param {?} search
     * @param {?=} searchKeyword
     * @return {?}
     */
    HighlightPipe.prototype.transform = /**
     * @param {?} text
     * @param {?} search
     * @param {?=} searchKeyword
     * @return {?}
     */
    function (text, search, searchKeyword) {
        /** @type {?} */
        var pattern = search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
        pattern = pattern.split(' ').filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return t.length > 0;
        })).join('|');
        /** @type {?} */
        var regex = new RegExp(pattern, 'gi');
        if (!search) {
            return text;
        }
        if (searchKeyword) {
            /** @type {?} */
            var name_1 = text[searchKeyword].replace(regex, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) { return "<b>" + match + "</b>"; }));
            // copy original object
            /** @type {?} */
            var text2 = __assign({}, text);
            // set bold value into searchKeyword of copied object
            text2[searchKeyword] = name_1;
            return text2;
        }
        else {
            return search ? text.replace(regex, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) { return "<b>" + match + "</b>"; })) : text;
        }
    };
HighlightPipe.ɵfac = function HighlightPipe_Factory(t) { return new (t || HighlightPipe)(); };
HighlightPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "highlight", type: HighlightPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightPipe, [{
        type: Pipe,
        args: [{
                name: 'highlight'
            }]
    }], function () { return []; }, null); })();
    return HighlightPipe;
}());
export { HighlightPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LnBpcGUuanMiLCJzb3VyY2VzIjpbImFuZ3VsYXItbmctYXV0b2NvbXBsZXRlL2xpYi9hdXRvY29tcGxldGUvaGlnaGxpZ2h0LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7O0FBRWxEO0FBR2tCLElBSGxCO0FBQ21CLElBeUJuQixDQUFDO0FBQ0Q7QUFBUTtBQUF1QjtBQUF5QjtBQUFpQztBQUFtQjtBQUFRLElBdkJsSCxpQ0FBUztBQUFPO0FBQXVCO0FBQ3ZDO0FBQWlDO0FBQW1CO0FBQVEsSUFENUQsVUFBVSxJQUFTLEVBQUUsTUFBVyxFQUFFLGFBQW1CO0FBQUk7QUFDdkMsWUFBWixPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxxQ0FBcUMsRUFBRSxNQUFNLENBQUM7QUFDL0UsUUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNO0FBQU07QUFDekI7QUFDSjtBQUNOLFFBSDhCLFVBQUMsQ0FBQztBQUFJLFlBQ3hDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDMUIsUUFBSSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakI7QUFBeUIsWUFBZixLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztBQUMzQyxRQUNJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDakIsWUFBTSxPQUFPLElBQUksQ0FBQztBQUNsQixTQUFLO0FBQ0wsUUFDSSxJQUFJLGFBQWEsRUFBRTtBQUN2QjtBQUE2QixnQkFBakIsTUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSztBQUFPO0FBQ3JEO0FBQ0g7QUFBZ0IsWUFGbUMsVUFBQyxLQUFLLElBQUssT0FBQSxRQUFNLEtBQUssU0FBTSxFQUFqQixDQUFpQixFQUFDO0FBQ25GO0FBQ007QUFDRixnQkFEUSxLQUFLLGdCQUFPLElBQUksQ0FBQztBQUM3QixZQUFNLHFEQUFxRDtBQUMzRCxZQUFNLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxNQUFJLENBQUM7QUFDbEMsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztBQUFPO0FBQWdDO0FBSWpFO0FBQWdCLFlBSlksVUFBQyxLQUFLLElBQUssT0FBQSxRQUFNLEtBQUssU0FBTSxFQUFqQixDQUFpQixFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMvRSxTQUFLO0FBQ0wsSUFBRSxDQUFDO2lEQXpCRixJQUFJLFNBQUMsc0JBQ0osSUFBSSxFQUFFO01BQVcsa0JBQ2xCOzs7Ozs7Z0RBQ1E7QUFBQyxJQXVCVixvQkFBQztBQUNBLENBREEsQUExQkQsSUEwQkM7QUFDRCxTQXhCYSxhQUFhO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdoaWdobGlnaHQnXG59KVxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKHRleHQ6IGFueSwgc2VhcmNoOiBhbnksIHNlYXJjaEtleXdvcmQ/OiBhbnkpOiBhbnkge1xuICAgIGxldCBwYXR0ZXJuID0gc2VhcmNoLnJlcGxhY2UoL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nLCAnXFxcXCQmJyk7XG4gICAgcGF0dGVybiA9IHBhdHRlcm4uc3BsaXQoJyAnKS5maWx0ZXIoKHQpID0+IHtcbiAgICAgIHJldHVybiB0Lmxlbmd0aCA+IDA7XG4gICAgfSkuam9pbignfCcpO1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnZ2knKTtcblxuICAgIGlmICghc2VhcmNoKSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICBpZiAoc2VhcmNoS2V5d29yZCkge1xuICAgICAgY29uc3QgbmFtZSA9IHRleHRbc2VhcmNoS2V5d29yZF0ucmVwbGFjZShyZWdleCwgKG1hdGNoKSA9PiBgPGI+JHttYXRjaH08L2I+YCk7XG4gICAgICAvLyBjb3B5IG9yaWdpbmFsIG9iamVjdFxuICAgICAgY29uc3QgdGV4dDIgPSB7Li4udGV4dH07XG4gICAgICAvLyBzZXQgYm9sZCB2YWx1ZSBpbnRvIHNlYXJjaEtleXdvcmQgb2YgY29waWVkIG9iamVjdFxuICAgICAgdGV4dDJbc2VhcmNoS2V5d29yZF0gPSBuYW1lO1xuICAgICAgcmV0dXJuIHRleHQyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2VhcmNoID8gdGV4dC5yZXBsYWNlKHJlZ2V4LCAobWF0Y2gpID0+IGA8Yj4ke21hdGNofTwvYj5gKSA6IHRleHQ7XG4gICAgfVxuICB9XG59XG4iXX0=